set quiet := true
set shell := ['bash', '-euo', 'pipefail', '-c']

IMAGE_VERSION := ```
    curl --silent --noproxy '*' https://factory.talos.dev/versions | jq --raw-output '
    map(select(test("^v[0-9.]+$"))) | sort_by(. | ltrimstr("v") | split(".") | map(tonumber)) | reverse | .[0]' | tail -n1
  ```
TALOS_ENDPOINT := `talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1`

[private]
default:
  @just --list

[doc('Get latest secureboot ISO for talos')]
image mode:
  @echo "Latest version: {{IMAGE_VERSION}}"
  @echo "Image Downloading: talos_{{mode}}_{{IMAGE_VERSION}}_metal_amd64_secureboot.iso"
  curl --progress-bar -L "https://factory.talos.dev/image/$(just _schema {{mode}})/{{IMAGE_VERSION}}/metal-amd64-secureboot.iso" \
    -o /tmp/talos-{{mode}}-{{IMAGE_VERSION}}-metal-amd64-secureboot.iso
  mv /tmp/talos-{{mode}}-{{IMAGE_VERSION}}-metal-amd64-secureboot.iso "${OPS_DIR}"

[doc('Get schema ID for specific environment')]
_schema mode:
  yq '.controlPlane.schematic' "${TALOS_DIR}/talconfig.{{mode}}.yaml" > /tmp/schematic.yaml
  curl --silent --noproxy '*' -X POST --data-binary @/tmp/schematic.yaml https://factory.talos.dev/schematics | jq --raw-output '.id'

[doc('Generate talos configuration')]
generate mode:
  op run --env-file "${TALOS_DIR}/talhelper.env" --no-masking -- talhelper genconfig \
      --config-file "${TALOS_DIR}/talconfig.{{mode}}.yaml" \
      --secret-file "${TALOS_DIR}/talsecret.yaml" \
      --out-dir "${TALOS_DIR}/clusterconfig"
  mkdir -p ~/.talos && cp "${TALOSCONFIG}" ~/.talos/config

[doc('Apply talos configuration to node')]
apply node *args:
  @echo "Applying talos configuration to {{node}}"
  talosctl apply-config --nodes {{node}} --file ${TALOS_DIR}/clusterconfig/main-{{node}}.yaml {{args}}

[doc('Bootstrap talos cluster, INSECURE')]
_bootstrap_talos:
  for FILE in $(ls ${TALOS_DIR}/clusterconfig/*.yaml); do \
    just apply $(basename "$FILE" .yaml | sed 's/^main-//') --insecure; \
  done

[doc('Bootstrap K8S')]
_bootstrap_k8s:
  until $(talosctl -n "{{TALOS_ENDPOINT}}" bootstrap); do \
    sleep 5; \
  done

[doc('Fetch kubeconfig')]
kubeconfig:
  talosctl kubeconfig --nodes {{ TALOS_ENDPOINT }} --force "${KUBECONFIG}"
  mkdir -p ~/.kube && cp "${KUBECONFIG}" ~/.kube/config

[doc('Reboot node')]
reboot node:
  #!/usr/bin/env bash
  printf "Reboot node {{node}}? (y/N) "
  read -r confirm
  case "$confirm" in
    y|Y)
      talosctl -n {{node}} reboot -m powercycle
      ;;
    *)
      echo "Cancelled."
      exit 0
      ;;
  esac

[doc('Reset node or cluster')]
reset node:
  #!/usr/bin/env bash
  printf "Reset {{node}}? (y/N) "
  read -r confirm
  case "$confirm" in
    y|Y)
      if [ "{{node}}" = "cluster" ]; then
        talosctl reset --system-labels-to-wipe STATE \
          --system-labels-to-wipe EPHEMERAL \
          --graceful=false --wait=false --reboot
      else
        talosctl -n {{node}} reset --graceful=false --reboot
      fi
      ;;
    *)
      echo "Cancelled."
      exit 0
      ;;
  esac
