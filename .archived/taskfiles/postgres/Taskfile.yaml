---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  DB_NS: "database-system"
  DB_CLUSTER: "postgres"
  OUTPUT_DIR: "."
  PG_CLI_ARGS: "--verbose --format=c --no-comments --clean --if-exists --no-owner --extension plpgsql"

tasks:
  crunchy-dump:
    desc: Run pg_dump on the master instance of a CrunchyData Postgres cluster. [DB_NAME=required] [OUTPUT_DIR=.] [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - which kubectl
      - test -f "${KUBECONFIG}"
      - sh: |
          kubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            --field-selector=status.phase=Running >/dev/null 2>&1
    requires:
      vars: [DB_NAME]
    vars:
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
        pg_dump --dbname {{.DB_NAME}} {{.PG_CLI_ARGS}} --file /pgdata/{{.DB_NAME}}.psql
      - kubectl cp --container database "{{.DB_NS}}/{{.CRUNCHY_PRIMARY_POD}}:/pgdata/{{.DB_NAME}}.psql" "{{.OUTPUT_DIR}}/{{.DB_NAME}}.psql"
      - kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- rm -f /pgdata/{{.DB_NAME}}.psql

  crunchy-restore:
    desc: Restore a pg_dump to a CrunchyData Postgres cluster. [DB_NAME=required] [DB_USER=required] [FILE=required] [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - which kubectl
      - test -f "${KUBECONFIG}"
      - test -f "{{.FILE}}"
      - sh: |
          kubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            >/dev/null 2>&1
    requires:
      vars: [DB_NAME, DB_USER, FILE]
    vars:
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl cp --container database "{{.FILE}}" "{{.DB_NS}}/{{.CRUNCHY_PRIMARY_POD}}:/pgdata/restore-{{.DB_NAME}}.psql"
      - kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
        psql -c "ALTER DATABASE \"{{.DB_NAME}}\" OWNER TO \"{{.DB_USER}}\";"
      - kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
        pg_restore --dbname {{.DB_NAME}} {{.PG_CLI_ARGS}} /pgdata/restore-{{.DB_NAME}}.psql
      - defer: kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- rm -f /pgdata/restore-{{.DB_NAME}}.psql

  crunchy-exec:
    desc: Exec into the master instance of a CrunchyData Postgres cluster. [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - which kubectl
      - test -f "${KUBECONFIG}"
      - sh: |
          kkubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            >/dev/null 2>&1
    vars:
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.DB_NS}} \
            -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
            -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl exec -it --container database -n {{.DB_NS}} {{.CRUNCHY_PRIMARY_POD}} -- /bin/bash
