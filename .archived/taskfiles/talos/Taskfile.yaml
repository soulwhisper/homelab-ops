---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

# : 'talhelper-less' talos bootstrap tasks
# :: folder structure
# ./infrastructure/talos/{controlplane-'nodename',controlplane,schematic}.yaml.j2; extraManifests in controlplane.yaml.j2;

vars:
  SYSTEM_UPGRADE_KS: "{{.K8S_DIR}}/apps/gitops-system/system-upgrade-controller/ks.yaml"
env:
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}

tasks:
  ## :: replace 'bootstrap:talos'
  talos:
    desc: Bootstrap Talos
    vars:
      MODE: '{{.MODE | default "prod"}}'
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      K8S_CONTEXT: '{{.K8S_CONTEXT | default "main"}}'
      K8S_ENDPOINT: '{{.K8S_ENDPOINT | default "https://k8s.homelab.internal:6443"}}'
    preconditions:
      - which bash jq kubectl talosctl
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
    cmds:
      - task: talos:_bootstrap MODE={{.MODE}}
      - until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
      - kubectl config set-cluster {{.K8S_CONTEXT}} --server {{.K8S_ENDPOINT}}
      - talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force ${KUBECONFIG}
      - bash -c 'mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config'

  ## :: replace 'talos:generate'
  generate:
    desc: Generate/Refresh Talos client configuration
    preconditions:
      - which op talosctl
      - op user get --me
    cmds:
      - op item get talos --fields label=machine_ca_crt --reveal | base64 -d > ca.crt
      - op item get talos --fields label=machine_ca_key --reveal | base64 -d > ca.key
      - talosctl gen key --name admin
      - talosctl gen csr --key admin.key --ip 127.0.0.1
      - talosctl gen crt --ca ca --csr admin.csr --name admin --force --hours 8760
      - |
        cat <<EOF > talosconfig
        context: admin@main
        contexts:
          admin@main:
            ca: $(base64 ca.crt | tr -d '\n')
            crt: $(base64 admin.crt | tr -d '\n')
            key: $(base64 admin.key | tr -d '\n')
        EOF
      - rm -f ca.crt ca.key admin.key admin.csr admin.crt
      - mv -f talosconfig ${TALOSCONFIG}
      - bash -c 'mkdir -p ~/.talos && cp ${TALOSCONFIG} ~/.talos/config'

  ## :: add to 'talos:'
  apply-node:
    desc: Apply Talos config for a node [NODE=required]
    vars:
      DRYRUN: '{{.DRYRUN | default "false"}}'
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
      MACHINE_TYPE: '{{.MACHINE_TYPE | default "controlplane"}}'
      MODE: '{{.MODE | default "prod"}}'
    requires:
      vars:
        - NODE
    preconditions:
      - '[[ "{{.MODE}}" == "test" || "{{.MODE}}" == "prod" ]]'
      - which curl jq minijinja-cli op talosctl
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}-{{.NODE}}.yaml.j2
      - talosctl config info
      - op user get --me
    env:
      MODE: "{{.MODE}}"
      TALOS_SCHEMATIC:
        sh: |
          MODE={{.MODE}} minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
            | curl --silent --noproxy '*' -X POST --data-binary @- https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
    cmd: |
      minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 \
        | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --config-patch @<(minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}-{{.NODE}}.yaml.j2) \
          --file /dev/stdin {{if (eq .INSECURE "true")}}--insecure{{end}} {{if (eq .DRYRUN "true")}}--dry-run{{end}}

  # :: replace 'talos:_bootstrap', remove 'talos:_apply-machineconfig'
  _bootstrap:
    internal: true
    desc: Apply bootstrap configs to talos cluster
    silent: true
    vars:
      MODE: '{{.MODE | default "prod"}}'
      FILES:
        sh: ls {{.TALOS_DIR}}/*.yaml.j2
    cmds:
      # bootstrap controlplane nodes
      - for:
          var: FILES
        task: apply-node
        vars:
          MODE: "{{.MODE}}"
          MACHINE_TYPE: "controlplane"
          NODE: |-
            {{ trimPrefix (printf "controlplane-") (base .ITEM) | trimSuffix ".yaml.j2" }}
