version: "3"

tasks:
  crunchy-dump:
    desc: Run pg_dump on the master instance of a CrunchyData Postgres cluster. [DB_NAME=required] [OUTPUT_DIR=.] [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - sh: '[ -n "$(command -v kubectl)" ] || (echo "kubectl not found" && exit 1)'
      - sh: |
          NS="{{.NS | default "database-system"}}"
          CLUSTER="{{.DB_CLUSTER | default "postgres"}}"
          kubectl get pods -n "$NS" -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster="$CLUSTER" --field-selector=status.phase=Running >/dev/null 2>&1
    requires:
      vars: [DB_NAME]
    vars:
      NS: "{{.NS | default "database-system"}}"
      DB_CLUSTER: "{{.DB_CLUSTER | default "postgres"}}"
      OUTPUT_DIR: "{{.OUTPUT_DIR | default "."}}"
      CLI_ARGS: "{{.CLI_ARGS | default "--verbose --format=c --no-comments --clean --if-exists --no-owner --extension plpgsql"}}"
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.NS}} \
          -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
          -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
          pg_dump --dbname {{.DB_NAME}} {{.CLI_ARGS}} --file /pgdata/{{.DB_NAME}}.psql
      - kubectl cp --container database "{{.NS}}/{{.CRUNCHY_PRIMARY_POD}}:/pgdata/{{.DB_NAME}}.psql" "{{.OUTPUT_DIR}}/{{.DB_NAME}}.psql"
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- rm -f /pgdata/{{.DB_NAME}}.psql

  crunchy-restore:
    desc: Restore a pg_dump to a CrunchyData Postgres cluster. [DB_NAME=required] [DB_USER=required] [FILE=required] [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - sh: '[ -n "$(command -v kubectl)" ] || (echo "kubectl not found" && exit 1)'
      - sh: |
          NS="{{.NS | default "database-system"}}"
          CLUSTER="{{.DB_CLUSTER | default "postgres"}}"
          kubectl get pods -n "$NS" -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster="$CLUSTER" >/dev/null 2>&1
      - sh: '[ -f "{{.FILE}}" ] || (echo "File {{.FILE}} not found" && exit 1)'
    requires:
      vars: [DB_NAME, DB_USER, FILE]
    vars:
      NS: "{{.NS | default "database-system"}}"
      DB_CLUSTER: "{{.DB_CLUSTER | default "postgres"}}"
      CLI_ARGS: "{{.CLI_ARGS | default (printf "--verbose --format=c --clean --if-exists --no-owner --role %s" .DB_USER)}}"
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.NS}} \
          -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
          -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl cp --container database "{{.FILE}}" "{{.NS}}/{{.CRUNCHY_PRIMARY_POD}}:/pgdata/restore-{{.DB_NAME}}.psql"
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
          psql -c "ALTER DATABASE \"{{.DB_NAME}}\" OWNER TO \"{{.DB_USER}}\";"
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- \
          pg_restore --dbname {{.DB_NAME}} {{.CLI_ARGS}} /pgdata/restore-{{.DB_NAME}}.psql
      - defer: kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- rm -f /pgdata/restore-{{.DB_NAME}}.psql

  crunchy-exec:
    desc: Exec into the master instance of a CrunchyData Postgres cluster. [NS=database-system] [DB_CLUSTER=postgres]
    preconditions:
      - sh: '[ -n "$(command -v kubectl)" ] || (echo "kubectl not found" && exit 1)'
      - sh: |
          NS="{{.NS | default "database-system"}}"
          CLUSTER="{{.DB_CLUSTER | default "postgres"}}"
          kubectl get pods -n "$NS" -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster="$CLUSTER" >/dev/null 2>&1
    vars:
      NS: "{{.NS | default "database-system"}}"
      DB_CLUSTER: "{{.DB_CLUSTER | default "postgres"}}"
      CRUNCHY_PRIMARY_POD:
        sh: |
          kubectl get pods -n {{.NS}} \
          -l postgres-operator.crunchydata.com/role=master,postgres-operator.crunchydata.com/cluster={{.DB_CLUSTER}} \
          -o jsonpath='{.items[0].metadata.name}'
    cmds:
      - kubectl exec -it --container database -n {{.NS}} {{.CRUNCHY_PRIMARY_POD}} -- /bin/bash
