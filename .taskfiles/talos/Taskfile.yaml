---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  getimage:
    desc: Get latest ISO for talos
    silent: true
    preconditions:
      - '[[ "{{.MODE}}" == "test" || "{{.MODE}}" == "prod" ]]'
      - '[[ "{{.SECUREBOOT}}" == "true" || "{{.SECUREBOOT}}" == "false" ]]'
      - which curl jq yq
      - test -f "{{.TALOS_DIR}}/talconfig.{{.MODE}}.yaml"
    vars:
      MODE: '{{.MODE | default "prod"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
      PLATFORM: '{{.PLATFORM | default "metal"}}'
      SECUREBOOT: '{{.SECUREBOOT | default "true"}}'
      VERSION:
        sh: curl -s https://factory.talos.dev/versions | jq -r '
          map(select(test("^v[0-9.]+$"))) | sort_by(. | ltrimstr("v") | split(".") | map(tonumber)) | reverse | .[0]' | tail -n1
      ID:
        sh: |
          yq '.controlPlane.schematic' "{{.TALOS_DIR}}/talconfig.{{.MODE}}.yaml" > /tmp/schematic.yaml
          curl -s -X POST --data-binary @/tmp/schematic.yaml https://factory.talos.dev/schematics | jq -r '.id'
      IMAGE: "{{if .SECUREBOOT}}{{.PLATFORM}}-{{.ARCH}}-secureboot.iso{{else}}{{.PLATFORM}}-{{.ARCH}}.iso{{end}}"
    cmds:
      - |
        echo "Latest version: {{.VERSION}}"
        echo "Schema ID: {{.ID}}"
        echo "Image Downloading: talos-{{.VERSION}}-{{.IMAGE}}"
        curl --progress-bar -L "https://factory.talos.dev/image/{{.ID}}/{{.VERSION}}/{{.IMAGE}}" -o /tmp/talos-{{.VERSION}}-{{.MODE}}-{{.IMAGE}} || (echo "Download failed"; exit 1)
      - mv /tmp/talos-{{.VERSION}}-{{.MODE}}-{{.IMAGE}} ./

  generate:
    desc: Generate bootstrap configs for talos cluster
    silent: true
    preconditions:
      - '[[ "{{.MODE}}" == "test" || "{{.MODE}}" == "prod" ]]'
      - which op talhelper
      - test -f "{{.TALOS_DIR}}/talconfig.{{.MODE}}.yaml"
      - test -f "{{.TALOS_DIR}}/talsecret.yaml"
      - test -f "{{.TALOS_DIR}}/talhelper.env"
      - op user get --me
    vars:
      MODE: '{{.MODE | default "prod"}}'
    cmds:
      - op run --env-file {{.TALOS_DIR}}/talhelper.env --no-masking -- talhelper genconfig
        --config-file {{.TALOS_DIR}}/talconfig.{{.MODE}}.yaml
        --secret-file {{.TALOS_DIR}}/talsecret.yaml
        --out-dir {{.TALOS_DIR}}/clusterconfig
      - bash -c 'mkdir -p ~/.talos && cp $TALOSCONFIG ~/.talos/config'

  _bootstrap:
    internal: true
    desc: Apply bootstrap configs to talos cluster
    silent: true
    vars:
      FILES:
        sh: ls {{.TALOS_DIR}}/clusterconfig/*.yaml
    cmds:
      - for:
          var: FILES
        task: _apply-machineconfig
        vars:
          FILENAME: "{{.ITEM}}"
          HOSTNAME: |-
            {{ trimPrefix (printf "main-") (base .ITEM) | trimSuffix ".yaml" }}

  _apply-machineconfig:
    internal: true
    desc: Apply bootstrap machineConfig to talos node
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - HOSTNAME
        - FILENAME
    cmds:
      - talosctl apply-config --nodes "{{.HOSTNAME}}" --file "{{.FILENAME}}" --insecure
