---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  getimage:
    desc: Get latest ISO for talos
    silent: true
    preconditions:
      - '[[ "{{.MODE}}" == "test" || "{{.MODE}}" == "prod" ]]'
      - '[[ "{{.SECUREBOOT}}" == "true" || "{{.SECUREBOOT}}" == "false" ]]'
      - which curl jq
      - test -f "{{.K8S_DIR}}/infrastructure/talos/schematic/{{.MODE}}.yaml"
    vars:
      MODE: '{{.MODE | default "prod"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
      PLATFORM: '{{.PLATFORM | default "metal"}}'
      SECUREBOOT: '{{.SECUREBOOT | default "true"}}'
      VERSION:
        sh: curl -s https://factory.talos.dev/versions | jq -r '
          map(select(test("^v[0-9.]+$"))) | sort_by(. | ltrimstr("v") | split(".") | map(tonumber)) | reverse | .[0]' | tail -n1
      ID:
        sh: curl -s -X POST --data-binary @"{{.K8S_DIR}}/infrastructure/talos/schematic/{{.MODE}}.yaml" https://factory.talos.dev/schematics | jq -r '.id'
      IMAGE: '{{if .SECUREBOOT}}{{.PLATFORM}}-{{.ARCH}}-secureboot.iso{{else}}{{.PLATFORM}}-{{.ARCH}}.iso{{end}}'
    cmds:
      - |
        echo "Latest version: {{.VERSION}}"
        echo "Schema ID: {{.ID}}"
        echo "Image Downloading: talos-{{.VERSION}}-{{.IMAGE}}"
        curl --progress-bar -L "https://factory.talos.dev/image/{{.ID}}/{{.VERSION}}/{{.IMAGE}}" -o /tmp/talos-{{.VERSION}}-{{.IMAGE}} || (echo "Download failed"; exit 1)
      - mv /tmp/talos-{{.VERSION}}-{{.IMAGE}} ./

  generate-clusterconfig:
    desc: Generate clusterconfig for Talos
    preconditions:
      - '[[ "{{.MODE}}" == "test" || "{{.MODE}}" == "prod" ]]'
      - which op talhelper
      - test -f "{{.K8S_DIR}}/infrastructure/talos/talconfig.{{.MODE}}.yaml"
      - test -f "{{.K8S_DIR}}/infrastructure/talos/talsecret.yaml"
      - test -f "{{.K8S_DIR}}/infrastructure/talos/talhelper.env"
    vars:
      MODE: '{{.MODE | default "prod"}}'
    cmds:
      - op run --env-file {{.K8S_DIR}}/infrastructure/talos/talhelper.env --no-masking -- talhelper genconfig
        --config-file {{.K8S_DIR}}/infrastructure/talos/talconfig.{{.MODE}}.yaml
        --secret-file {{.K8S_DIR}}/infrastructure/talos/talsecret.yaml
        --out-dir {{.K8S_DIR}}/infrastructure/talos/clusterconfig
      - fish -i -c 'mkdir -p ~/.talos && cp $TALOSCONFIG ~/.talos/config'

  apply-clusterconfig:
    desc: Apply clusterconfig for a Talos cluster
    vars:
      CLUSTERCONFIG_FILES:
        sh: ls {{.K8S_DIR}}/infrastructure/talos/clusterconfig/*.yaml
    preconditions:
      - test -f "${TALOSCONFIG}"
    cmds:
      - for:
          var: CLUSTERCONFIG_FILES
        task: _apply-machineconfig
        vars:
          FILENAME: "{{.ITEM}}"
          HOSTNAME: |-
            {{ trimPrefix (printf "main-") (base .ITEM) | trimSuffix ".yaml" }}
          DRY_RUN: "{{ .DRY_RUN }}"
          INSECURE: "{{ .INSECURE }}"

  apply-node:
    desc: Apply Talos config to a node [NODE=required]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.K8S_DIR}}/infrastructure/talos/clusterconfig/homelab-{{.NODE}}*.yaml
    cmds:
      - task: _apply-machineconfig
        vars:
          FILENAME: "{{.FILE}}"
          HOSTNAME: "{{.NODE}}"
      - talosctl --nodes {{.NODE}} health

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    preconditions:
      - which talosctl yq
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.K8S_DIR}}/infrastructure/talos/clusterconfig/homelab-{{.NODE}}*.yaml
      TALOS_IMAGE:
        sh: yq '.machine.install.image' < "{{.FILE}}"
    cmds:
      - talosctl --nodes {{.NODE}} upgrade --image="{{.TALOS_IMAGE}}" --timeout=10m
      - talosctl --nodes {{.NODE}} health

  _apply-machineconfig:
    internal: true
    desc: Apply a single Talos machineConfig to a Talos node
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - HOSTNAME
        - FILENAME
    cmds:
      - talosctl apply-config
        --nodes "{{.HOSTNAME}}"
        --file "{{.FILENAME}}"
        {{ if eq "true" .INSECURE }}--insecure{{ end }}
        {{ if eq "true" .DRY_RUN }}--dry-run{{ end }}
