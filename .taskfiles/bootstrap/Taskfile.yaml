---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  talos:
    desc: Bootstrap Talos
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which bash talosctl
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
    cmds:
      - task: :talos:_bootstrap
      - |
        until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
        talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force ${KUBECONFIG}
        bash -c 'mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config'

  apps:
    desc: Bootstrap Apps
    prompt: Bootstrap apps into Talos cluster?
    vars:
      FIX: '{{.FIX | default "false"}}'
    preconditions:
      - which helmfile kubectl op
      - test -f "{{.K8S_DIR}}/bootstrap/helmfile.yaml"
      - test -f "{{.K8S_DIR}}/bootstrap/resources.yaml"
      - kubectl config view
      - op user get --me
    cmds:
      - |
        {{if ne .FIX "true"}} until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done {{end}}
      # - |
      #   {{if eq .FIX "true"}} kubectl get crd | grep 'gateway.networking' | awk '{print $1}' | xargs kubectl delete crd {{end}}
      - op inject --in-file "{{.K8S_DIR}}/bootstrap/resources.yaml" | kubectl apply --server-side --filename -
      - helmfile --file {{.K8S_DIR}}/bootstrap/helmfile.yaml sync --hide-notes

  garage:
    desc: Bootstrap Garage buckets/keys
    prompt: Bootstrap local garage instance?
    silent: true
    vars:
      BUCKETS:
        - postgres
        - volsync
    preconditions:
      - which garage
      - test -f "/etc/garage.toml"
      - garage layout show
    cmds:
      - for:
          var: BUCKETS
        cmd: |
          access_key=$(op item get garage --fields "{{.ITEM}}_access_key" --reveal)
          secret_key=$(op item get garage --fields "{{.ITEM}}_secret_key" --reveal)
          garage bucket create "{{.ITEM}}"
          garage key import "$access_key" "$secret_key" -n "{{.ITEM}}" --yes
          garage bucket allow --read --write "{{.ITEM}}" --key "{{.ITEM}}"
